1.1572. Matrix Diagonal Sum:
Given a square matrix mat, return the sum of the matrix diagonals.
Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.
Input: mat = [[1,2,3],
              [4,5,6],
              [7,8,9]]
Output: 25
Explanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25
Notice that element mat[1][1] = 5 is counted only once.
code:
class Solution:
    def diagonalSum(self, mat: List[List[int]]) -> int:
       
        n = len(mat)
        primary_diag, secondary_diag = 0, 0

        for i in range(n):
            primary_diag += mat[i][i]
            secondary_diag += mat[i][n-1-i]

        if n % 2 == 0: 
            return primary_diag + secondary_diag

        return primary_diag + secondary_diag - mat[n//2][n//2]
2.48. Rotate Image:
You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

code:class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        n=len(matrix)
        #Transposing the Matrix
        for i in range(0,n):
            for j in range(i,n):
                temp=matrix[i][j]
                matrix[i][j]=matrix[j][i]
                matrix[j][i]=temp
        #shifting the elements accodingly...
        for i in range(0,n):
            for j in range(0,n//2):
                temp=matrix[i][j]
                matrix[i][j]=matrix[i][n-1-j]
                matrix[i][n-j-1]=temp

