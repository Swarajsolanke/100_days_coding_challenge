1.Kadane's Algorithm
Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.
Example 1:
Input:
N = 4
Arr[] = {-1,-2,-3,-4}
Output:
-1
Explanation:
Max subarray sum is -1 
of element (-1)
code:
class Solution:
    def maxSubArraySum(self,arr,N):
        max_sub=arr[0] # here i have used kadane's algorithm 
        sum=0
        for i in arr:
            if sum<0: # if the current sum is less than 0 reset it to 0 
                sum=0  #
            sum=sum+i  
            max_sub=max(max_sub,sum) # find the max between max_sub or sum 
           
        return max_sub
2.Count of Subarrays:
Given an array of N positive integers  Arr1, Arr2 Arrn. The value of each contiguous subarray of given array is the maximum element present in that subarray.
The task is to return the number of subarrays having value strictly greater than K.
Example 1:
Input:
N = 3, K = 2
Arr[] = {3, 2, 1}
Output: 3
Explanation: The subarrays having value
strictly greater than K are: [3], [3, 2]
and [3, 2, 1]. Thus there are 3 such
subarrays.
code:
  class Solution:
	def countSubarray(self,arr, n, k):
	    lis=[0 for i in  range(n)] # here created the list and set all elements to 0
	    for i in range(n):
	        if arr[i]>k: # checked the element is greater than K value 
	            lis[i]=i+1 # set the i+1 index value to given list 
	        else:
	           if i!=0: # checked the if i!=0 
	               lis[i]=lis[i-1] 
	    return sum(lis)  # here i summed them all and returned it 
